// This file was auto-generated by ML.NET Model Builder. 
using Microsoft.AspNetCore.Builder;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.ML;
using Microsoft.OpenApi.Models;
using Microsoft.ML.Data;
using System.Drawing;
using System.IO;
using System.Threading.Tasks;
using MLFighterJetDetector_WebApi1;

// Configure app
var builder = WebApplication.CreateBuilder(args);
builder.Services.AddPredictionEnginePool<MLFighterJetDetector.ModelInput, MLFighterJetDetector.ModelOutput>()
    .FromFile("MLFighterJetDetector.mlnet");

builder.Services.AddEndpointsApiExplorer();

builder.Services.AddSwaggerGen(c =>
{
    c.SwaggerDoc("v1", new OpenApiInfo { Title = "My API", Description = "Docs for my API", Version = "v1" });
});
var app = builder.Build();

app.UseSwagger();

app.UseSwaggerUI(c =>
{
    c.SwaggerEndpoint("/swagger/v1/swagger.json", "My API V1");
});

// Define prediction route & handler
app.MapPost("/predict",
    async (PredictionEnginePool<MLFighterJetDetector.ModelInput, MLFighterJetDetector.ModelOutput> predictionEnginePool, string imagePath) =>
    {
        var input = new MLFighterJetDetector.ModelInput()
        {
            ImageSource = File.ReadAllBytes(imagePath),
        };

        DateTime start = DateTime.Now ;
        var prediction = await Task.FromResult(predictionEnginePool.Predict(input));

        var finalResult = new FinalResult() { Scores = MLFighterJetDetector.GetSortedScoresWithLabels(prediction) };
        DateTime stop = DateTime.Now;
        finalResult.TimeInMs = (stop - start).TotalMilliseconds;
        return finalResult;
    });

// Run app
app.Run();
